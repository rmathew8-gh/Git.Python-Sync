#+setupfile: ~/.org-mode-goodies/setup.org

* check-repo-status

A Python tool to check if your local git repository is ahead, behind, or diverged from its remote.

** Features
- Checks if your branch is up to date, ahead, behind, or diverged from the remote
- Supports specifying the repository folder as an argument
- Easy to test and run with Makefile and uv
- Caches git fetches for 10 minutes by default for speed (configurable)
- Works for any current branch (not just main/master)
- Org-mode table now includes a 'Last Activity' column (date of last commit, YYYY/MM/DD)
- Results are sorted by remarkable status (dirty repos first), then by most recent activity
- Supports filtering for recently active repos with --recent-only

** Requirements
- Python 3.11+
- [uv](https://github.com/astral-sh/uv) (for dependency management)

** Installation
#+begin_src shell
make install
#+end_src

** Usage
Run in the current directory:
#+begin_src shell
make run
#+end_src

Or specify a repository folder:
#+begin_src shell
uv run python -m check_repo_status /path/to/repo
#+end_src

You can also pull after checking status:
#+begin_src shell
make run ARGS="--pull /path/to/repo"   # Pull current branch from remote
#+end_src

You can also force a fetch from remote, ignoring the cache:
#+begin_src shell
make run ARGS="--force /path/to/repo"   # Force fetch from remote
#+end_src

You can combine --force with --pull:
#+begin_src shell
make run ARGS="--force --pull /path/to/repo"   # Force fetch and pull
#+end_src

** Multi-Repo Status
You can check the status of all git repositories in subfolders of a directory and get an org-mode table for easy copy-paste into org documents:

#+begin_src shell
make run-multi ARGS=/path/to/parent_dir
#+end_src

You can also force fetch or pull all repos after checking status:
#+begin_src shell
make run-multi ARGS="--force /path/to/parent_dir"
make run-multi ARGS="--pull /path/to/parent_dir"
make run-multi ARGS="--force --pull /path/to/parent_dir"
#+end_src

You can filter to only show repos with activity in the last 3 months:
#+begin_src shell
make run-multi ARGS="--recent-only /path/to/parent_dir"
#+end_src

- The `--force` option will always fetch the latest from remote, ignoring the cache (useful if you want to ensure you have the latest info).
- The `--recent-only` option will only show repos with a commit in the last 3 months.

Example output:
#+begin_example
| Repo                 | Ahead | Behind | Status | Last Activity | Pull                | Branch               | Cached  |
|----------------------+-------+--------+--------+---------------+---------------------+---------------------+---------|
| repo1                | 2     | -      | S      | 2025/03/23    | OK                  | main                |         |
| repo3                | 1     | 1      | U      | 2025/02/10    | refs/heads/main: fast-forward | feature-x           |         |
| repo2                | -     | 3      | ✔      | 2024/12/01    | OK                  | master              | cached  |
#+end_example

Legend for Status column:
- ✔  = Clean (no changes)
- S  = Staged changes only
- U  = Unstaged changes only
- ?  = Untracked files only

** Advanced: Caching
By default, remote fetches are cached for 10 minutes to speed up repeated scans. You can override this by setting the environment variable:
#+begin_src shell
export GIT_FETCH_CACHE_SECONDS=30  # cache for 30 seconds
#+end_src

** Testing
Run all tests with:
#+begin_src shell
make test
#+end_src

** Cleaning
Remove caches and __pycache__:
#+begin_src shell
make clean
#+end_src

** Makefile Targets
- ~install~: Install dependencies using uv
- ~test~: Run tests with pytest in the uv environment
- ~run~: Run the check_repo_status module (optionally pass ARGS)
- ~clean~: Remove Python and pytest caches

** License
MIT 
